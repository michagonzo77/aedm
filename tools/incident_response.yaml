tools:
  - name: incident-response
    alias: incident-response
    description: Create a service ticket in Freshservice, extract the ticket ID, and send a formatted incident message to a Slack channel.
    type: python
    content: |
      import os
      import requests
      import json

      def create_ticket(description, servicename, title, incident_url, slackincidentcommander, slackdetectionmethod, slackbusinessimpact, incident_id):
          url = "https://aenetworks-fs-sandbox.freshservice.com/api/v2/tickets"
          payload = {
              "description": f"{description}<br><strong>Incident Commander:</strong>{slackincidentcommander}<br><strong>Detection Method:</strong>{slackdetectionmethod}<br><strong>Business Impact:</strong>{slackbusinessimpact}<br><strong>Ticket Link:</strong>{incident_url}",
              "subject": f"TESTING {servicename} - {title}",
              "email": "devsecops@aenetworks.com",
              "priority": 1,
              "status": 2,
              "source": 8,
              "category": "DevOps",
              "sub_category": "Pageout",
              "tags": [f"PDID_{incident_id}"]
          }
          headers = {
              "Content-Type": "application/json"
          }
          response = requests.post(url, auth=(os.getenv('FSAPI_SANDBOX'), 'X'), headers=headers, data=json.dumps(payload))
          response_data = response.json()
          return response_data['ticket']['id']

      def send_slack_message(channel, message, thread_ts=None):
          slack_payload = {
              "channel": channel,
              "text": message
          }
          if thread_ts:
              slack_payload["thread_ts"] = thread_ts

          response = requests.post(
              "https://slack.com/api/chat.postMessage",
              headers={
                  'Content-Type': 'application/json',
                  'Authorization': f'Bearer {os.getenv("SLACK_API_TOKEN")}'
              },
              json=slack_payload
          )
          if response.status_code != 200:
              print(f"Error sending Slack message: {response.status_code} - {response.text}")
          return response.json()

      slackdescription = "{{.slackdescription}}"
      slackincidentcommander = "{{.slackincidentcommander}}"
      slackdetectionmethod = "{{.slackdetectionmethod}}"
      slackbusinessimpact = "{{.slackbusinessimpact}}"
      servicename = "{{.servicename}}"
      title = "{{.title}}"
      incident_url = "{{.incident_url}}"
      incident_id = "{{.incident_id}}"
      bridge_url = "{{.bridge_url}}"
      slack_user_id = "<@U074TSUMZEJ>"  # Replace with the actual Slack user ID

      ticket_id = create_ticket(slackdescription, servicename, title, incident_url, slackincidentcommander, slackdetectionmethod, slackbusinessimpact, incident_id)
      ticket_url = f"https://aenetworks-fs-sandbox.freshservice.com/a/tickets/{ticket_id}"

      message = f"""
      ************** SEV 1 ****************
      {slack_user_id}
      Incident Commander: {slackincidentcommander}
      Detection Method: {slackdetectionmethod}
      Business Impact: {slackbusinessimpact}
      Bridge Link: <{bridge_url}|Bridge Link>
      Pagerduty Incident URL: {incident_url}
      FS Ticket URL: {ticket_url}
      We will keep everyone posted on this channel as we assess the issue further.
      """

      # Send the message to the Slack channel
      response = send_slack_message('#kubiya_testing', message)

    dependencies: |
      requests
    args:
      slackdescription:
        description: Description of the incident from Slack
        required: true
      slackincidentcommander:
        description: Name of the incident commander
        required: true
      slackdetectionmethod:
        description: Method of incident detection
        required: true
      slackbusinessimpact:
        description: Business impact of the incident
        required: true
      servicename:
        description: Name of the service involved in the incident
        required: true
      title:
        description: Title of the incident
        required: true
      incident_url:
        description: URL of the incident
        required: true
      incident_id:
        description: ID of the incident
        required: true
      bridge_url:
        description: URL of the incident bridge
        required: true
    env:
      - FSAPI_SANDBOX # The API key for Freshservice (injected automatically by Kubiya)
      - SLACK_API_TOKEN # The Slack API token for sending messages (injected automatically by Kubiya)
